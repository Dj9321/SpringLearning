-- Creating table: public.created_in_db
DROP TABLE IF EXISTS public.created_in_db;

CREATE TABLE IF NOT EXISTS public.created_in_db
(
    primary_key1 integer NOT NULL,
    "Column1" character varying COLLATE pg_catalog."default",
    "Column2" character varying pg_catalog."default",
    CONSTRAINT created_in_db_pkey PRIMARY KEY (primary_key1)
)
-- All user-related objects, including tables, indexes, and materialized views, will be located in pg_default if no other tablespace is specified
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.created_in_db
    OWNER to postgres;
    
-- creating a sequence
CREATE SEQUENCE created_in_db_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
    
-- Select queries

SELECT * FROM public.created_in_db ORDER BY primary_key1 ASC 

-- Sequence has last_value, log_cnt, is_called
select * from created_in_db_seq;


-- For EUREKA 

DROP TABLE IF EXISTS public.student;
CREATE TABLE IF NOT EXISTS public.student
(
    id integer NOT NULL,
    "first_name" character varying COLLATE pg_catalog."default",
    "last_name" character varying,
	"email" character varying ,
	"address_id" integer ,
	CONSTRAINT student1 PRIMARY KEY (id)
)
-- All user-related objects, including tables, indexes, and materialized views, will be located in pg_default if no other tablespace is specified
TABLESPACE pg_default;
created_in_db_seqcreated_in_db_seqcreated_in_db_seqcreated_in_db_seq
ALTER TABLE IF EXISTS public.student
    OWNER to postgres;
    
	
	CREATE TABLE IF NOT EXISTS public.address
(
    id integer NOT NULL,
    "street" character varying ,
    "city" character varying ,
    CONSTRAINT address1 PRIMARY KEY (id)
)
-- All user-related objects, including tables, indexes, and materialized views, will be located in pg_default if no other tablespace is specified
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.address

    OWNER to postgres;
    
    -- For spring security
create table users(username varchar(50) not null primary key,password varchar(500) not null,enabled boolean not null);
create table authorities (username varchar(50) not null,authority varchar(50) not null,constraint fk_authorities_users foreign key(username) references users(username));
create unique index ix_auth_username on authorities (username,authority);


Insert into users values ('user', '{noop}Sand@345', '1');
Insert into authorities values('user', 'read');

Insert into users values ('admin', '{bcrypt}$2a$12$af8x3jc.amnpMDDZwwwyOe3uFSBMBF8y1vtrw34/41BIocXfR0AHK', '1');
Insert into authorities values('admin', 'admin');

select * from users;
select * from authorities;

-- Creating a custom user table: GENERATED ALWAYS AS IDENTITY in postgres > similar to AUTO_INCREMENT
CREATE TABLE customer (
  id int NOT NULL GENERATED ALWAYS AS IDENTITY,
  email varchar(45) NOT NULL,
  pwd varchar(200) NOT NULL,
  role varchar(45) NOT NULL,
  PRIMARY KEY (id)
);

select * from customer;

INSERT  INTO customer (email, pwd, role) VALUES ('dheeraj@example.com', '{noop}Sand@345', 'read');
INSERT  INTO customer (email, pwd, role) VALUES ('admin@example.com', '{bcrypt}$2a$12$af8x3jc.amnpMDDZwwwyOe3uFSBMBF8y1vtrw34/41BIocXfR0AHK', 'admin');

